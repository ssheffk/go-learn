package main

import (
	"context"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"time"
)

// func handler(w http.ResponseWriter, r *http.Request) {
// 	fmt.Fprintf(w, "Now we use handler as bind function")
// }

func main() {

	// will serve all te files in the browser
	http.Handle("/files/", http.StripPrefix("/files/",
		http.FileServer(http.Dir("."))))

	http.HandleFunc("/servecontent", func(w http.ResponseWriter, r *http.Request) {
		customerFile, err := os.Open("customers.csv")
		if err != nil {
			log.Fatal(err)
		}
		defer customerFile.Close()

		http.ServeContent(w, r, "customers.csv", time.Now(), customerFile)
	})

	http.HandleFunc("/serveFile", func(w http.ResponseWriter, r *http.Request) {
		http.ServeFile(w, r, "./customers.csv")
	})

	http.HandleFunc("/fprint", func(w http.ResponseWriter, r *http.Request) {
		customerFile, err := os.Open("customers.csv")
		if err != nil {
			log.Fatal(err)
		}
		defer customerFile.Close()
		// data, err := io.ReadAll(customerFile)
		// if err != nil {
		// 	log.Fatal(err)
		// }

		// fmt.Fprint(w, string(data))

		// alternative to uppercase
		io.Copy(w, customerFile)
	})

	// we can create as many server as we want
	s := http.Server{
		Addr: ":3000",
	}

	go func() {
		log.Fatal(s.ListenAndServe())
	}()

	fmt.Println("Server started, press <Enter> to shutdown")
	fmt.Scanln()
	s.Shutdown(context.Background())
	fmt.Println("Server stopped")
}

type myHandler string

func (mh myHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	w.Header().Add("X-Powered-By", "energetic gophers")

	// how we can set cookies
	http.SetCookie(w, &http.Cookie{
		Name:    "session-id",
		Value:   "123456789",
		Expires: time.Now().Add(24 * time.Hour * 365),
	})

	// we have some constants for status codes
	w.WriteHeader(http.StatusAccepted)

	fmt.Fprintln(w, string(mh))
	fmt.Fprintln(w, r.Header)
}
